openapi: 3.0.0
info:
  title: Composite Request Service
  description: >-
    Composite request service for submitting multiple "subrequests" in a single
    POST request.
  version: '1.0'
  contact:
    name: Anjali Israni
    email: anjali.israni@sage.com
servers:
  - url: http://localhost:3000
  - url: https://dev01.intacct.com/users/anjali.israni/projects.nextgenapi/api/v0
    description: Development Server
tags:
  - name: Composite requests
    description: >-
      Composite request service for submitting multiple "subrequests" in a
      single POST request.
    x-displayName: Composite requests
  - name: Export
    description: export data in different formats
    x-displayName: Export
  - name: Key value maps
    description: Key value map description -- what it's for and where it's used.
    x-displayName: Key value maps
  - name: Models
    description: Model service
    x-displayName: Models
  - name: oauth2
    description: Authentication API
    x-displayName: oauth2
  - name: Query
    description: Query Service
    x-displayName: Query
  - name: System views
    description: System view description -- explain what it's for and how it's used.
    x-displayName: System views
  - name: Transaction definition
    description: Transaction definition description.
    x-displayName: Transaction definition
  - name: User views
    description: User view description -- explain what it's for and how it's used.
    x-displayName: User views
  - name: Views
    description: View description -- explain what it's for and how it's used.
    x-displayName: Views
paths:
  /services/composite:
    post:
      summary: Send a composite request
      description: Sends multiple requests within a single POST request.
      tags:
        - Composite requests
      operationId: post-services-composite
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/composite'
            examples:
              Multiple independent requests to change employee location:
                value:
                  - method: PATCH
                    path: /objects/employee/26
                    body:
                      location:
                        key: '6'
                  - method: PATCH
                    path: /objects/employee/33
                    body:
                      location:
                        key: '6'
                  - method: PATCH
                    path: /objects/employee/62
                    body:
                      location:
                        key: '6'
              Multiple requests using data from previous:
                value:
                  - method: GET
                    path: /objects/employee/52
                    resultReference: employee
                  - method: POST
                    path: /services/query
                    body:
                      object: employee
                      fields:
                        - id
                        - jobTitle
                        - department.key
                        - employeeType.name
                      filters:
                        - $eq:
                            department.key: '@{employee.department.key}'
                        - $eq:
                            employeeType.name: '@{employee.employeeType.name}'
                      filterExpression: 1 and 2
                      orderBy:
                        - id: asc
              Multi-status example:
                value:
                  - method: GET
                    path: >-
                      /services/core/async/job-status?jobId=NjQ2NTc2MzAzMVl1Ul9qVmd6M2t4M2pPdEJya2J5Y2dBQUFBQTE
                  - method: GET
                    path: /objects/contact/2662
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ia::status:
                    type: string
                    description: HTTP status code
                  ia::result:
                    type: array
                    description: Composite response
                    items:
                      type: object
                      properties:
                        ia::result:
                          type: object
                          anyOf:
                            - type: object
                              description: >-
                                Response of GET on a single object or query
                                results
                            - $ref: '#/components/schemas/object-reference.schema'
                        ia::meta:
                          $ref: '#/components/schemas/metadata.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata-extended.schema'
              examples:
                Multiple independent requests to change employee location:
                  value:
                    ia::result:
                      - ia::result:
                          key: '26'
                          id: '0014'
                          href: /objects/employee/26
                        ia::meta:
                          totalCount: 1
                        ia::status: 200
                        ia::headers:
                          X-IA-API-ORM-Action: update
                      - ia::result:
                          key: '33'
                          id: '1'
                          href: /objects/employee/33
                        ia::meta:
                          totalCount: 1
                        ia::status: 200
                        ia::headers:
                          X-IA-API-ORM-Action: update
                      - ia::result:
                          key: '62'
                          id: '2'
                          href: /objects/employee/62
                        ia::meta:
                          totalCount: 1
                        ia::status: 200
                        ia::headers:
                          X-IA-API-ORM-Action: update
                    ia::meta:
                      totalCount: 3
                Multiple Requests using data from previous:
                  value:
                    ia::result:
                      - ia::result:
                          key: '52'
                          id: Emp2
                          SSN: '100000001'
                          jobTitle: Sr Software Eng
                          location:
                            id: '10'
                            key: '15'
                            name: Indianapolis
                            href: /objects/location/15
                          department:
                            id: '10'
                            key: '10'
                            name: QA - II
                            href: /objects/department/10
                          manager:
                            key: '11'
                            id: '10'
                            href: /objects/employee/11
                          birthDate: '1984-04-14'
                          startDate: '2021-05-01'
                          endDate: '2025-04-02'
                          status: active
                          employeeType:
                            id: Part Time
                            name: Part Time
                            key: '2'
                            href: /objects/employee-type/2
                          gender: female
                          terminationType: involuntary
                          primaryContact:
                            id: abc(C02)
                            name: abc(C02)
                            key: '205'
                            href: /objects/contact/205
                          defaultCurrency: MXN
                          earningType:
                            key: '2'
                            id: earningType2
                            name: earningType2
                            href: /objects/earning-type/2
                          class:
                            id: SW-Office
                            name: Office Software
                            key: '9'
                            href: /objects/class/9
                          href: /objects/employee/52
                        ia::meta:
                          totalCount: 1
                        ia::status: 200
                      - ia::result:
                          - id: Emp2
                            jobTitle: Sr Software Eng
                            department.key: '10'
                            employeeType.name: Part Time
                          - id: Emp10
                            jobTitle: QA Engineer
                            department.key: '10'
                            employeeType.name: Part Time
                          - id: Emp22
                            jobTitle: Architect
                            department.key: '10'
                            employeeType.name: Full Time
                        ia::meta:
                          totalCount: 3
                          start: 1
                          pageSize: 100
                          next: null
                          previous: null
                        ia::status: 200
                    ia::meta:
                      totalCount: 2
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  ia::status:
                    type: string
                    description: HTTP status code
                  ia::result:
                    type: array
                    description: Composite response
                    items:
                      type: object
                      anyOf:
                        - title: success-response
                          description: Success response
                          properties:
                            ia::result:
                              type: object
                              anyOf:
                                - type: object
                                  description: >-
                                    Response of GET on a single object or query
                                    results
                                - $ref: '#/components/schemas/object-reference.schema'
                                - $ref: '#/components/schemas/error-response.schema'
                            ia::meta:
                              $ref: '#/components/schemas/metadata.schema'
                        - $ref: '#/components/schemas/error-response.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata-extended.schema'
              examples:
                Multi-status example:
                  value:
                    ia::result:
                      - ia::error:
                          code: notFound
                          message: >-
                            Asynchronous job
                            6465763031YSPy9lgWtJCMGZ6UkUbA6QAAAAY1 status could
                            not be found
                          supportId: tqKR0%7EYsTZeDEdVao0_h01dZFQqgAAAAY
                        ia::status: 404
                      - ia::error:
                          code: unprocessed
                          message: Operation skipped due to atomic transaction failure
                        ia::status: 422
                    ia::meta:
                      totalCount: 2
                      totalSuccess: 0
                      totalError: 2
        '400':
          $ref: '#/components/responses/400error'
  /services/export:
    post:
      summary: Export an object
      operationId: post-services-export
      description: Export a set of objects for filtered data.
      responses:
        '200':
          description: OK
          content:
            application/vnd.ms-word: {}
            application/vnd.ms-excel: {}
            application/pdf: {}
            text/xml: {}
        '400':
          $ref: '#/components/responses/400error'
      tags:
        - Export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/export.s1.schema'
            examples:
              Export vendor:
                value:
                  fileType: pdf
                  query:
                    object: vendor
                    fields:
                      - id
                      - name
                      - status
                      - key
                    filters:
                      - $eq:
                          status: active
                      - $eq:
                          billingType: openItem
                    filterExpression: 1 and 2
                    orderBy:
                      - id: asc
  /services/key-value-map:
    get:
      summary: List key value maps
      description: Returns a collection with a key, ID, and link for each key value map.
      tags:
        - Key value maps
      operationId: get-services-key-value-map
      parameters:
        - $ref: '#/components/parameters/type'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: List of key-value-map objects
                properties:
                  ia::result:
                    type: array
                    items:
                      $ref: '#/components/schemas/object-reference.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata-pages.schema'
              examples:
                example-1:
                  value:
                    ia::result:
                      - key: key1
                        type: user
                        value:
                          text-color: red
                          background-color: black
                          font: Ariel
                        href: /services/key-value-map/key1
                      - key: key2
                        type: user
                        value:
                          text-color: red
                          background-color: black
                          font: Ariel
                        href: /services/key-value-map/key2
                      - key: key3
                        type: user
                        value:
                          text-color: red
                          background-color: black
                          font: Ariel
                        href: /services/key-value-map/key3
                    ia::meta:
                      totalCount: 3
        '400':
          $ref: '#/components/responses/400error'
    post:
      summary: Create a key value map
      description: Creates a new key value map.
      tags:
        - Key value maps
      operationId: post-services-key-value-map
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/key-value-map.s1.schema'
            examples:
              example-1:
                value:
                  key: key1
                  type: user
                  value:
                    text-color: blue
                    background-color: black
                    font: Ariel
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                title: New key-value-map
                properties:
                  ia::result:
                    $ref: '#/components/schemas/object-reference.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
              examples:
                example-1:
                  value:
                    ia::result:
                      key: key1
                      type: user
                      href: /services/key-value-map/key1
                    ia::meta:
                      totalCount: 1
        '400':
          $ref: '#/components/responses/400error'
  /services/key-value-map/{key}:
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/type'
    get:
      summary: Get a key value map
      description: Returns the data for a particular key.
      tags:
        - Key value maps
      operationId: get-services-key-value-map-key
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Details of the key-value-map
                properties:
                  ia::result:
                    $ref: '#/components/schemas/key-value-map.s1.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
              examples:
                example-1:
                  value:
                    ia::result:
                      key: key1
                      type: user
                      value:
                        text-color: red
                        background-color: black
                        font: Ariel
                      href: /services/key-value-map/key1
                    ia::meta:
                      totalCount: 1
        '400':
          $ref: '#/components/responses/400error'
    delete:
      summary: Delete a key value map
      description: Deletes a key value map.
      tags:
        - Key value maps
      operationId: delete-services-key-value-map-key
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400error'
  /services/model:
    get:
      summary: Get an object model definition
      description: List all the fields and relationships for an object.
      operationId: get-services-model
      tags:
        - Models
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Definition of the object model
                properties:
                  ia::result:
                    $ref: '#/components/schemas/object-model.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
              examples:
                Model for department:
                  value:
                    ia::result:
                      fields:
                        id:
                          mutable: false
                          nullable: false
                          type: string
                          readOnly: false
                          writeOnly: false
                          required: false
                        key:
                          readOnly: true
                          type: string
                          writeOnly: false
                          required: false
                          nullable: false
                          mutable: false
                        name:
                          nullable: false
                          type: string
                          readOnly: false
                          writeOnly: false
                          required: false
                          mutable: true
                        reportTitle:
                          nullable: true
                          type: string
                          readOnly: false
                          writeOnly: false
                          required: false
                          mutable: true
                        status:
                          enum:
                            - active
                            - activeNonPosting
                            - inactive
                          type: string
                          readOnly: false
                          writeOnly: false
                          required: false
                          nullable: false
                          mutable: true
                      groups:
                        audit:
                          fields:
                            createdBy:
                              readOnly: true
                              type: string
                              writeOnly: false
                              required: false
                              nullable: false
                              mutable: false
                            createdDateTime:
                              format: date-time
                              readOnly: true
                              type: string
                              writeOnly: false
                              required: false
                              nullable: false
                              mutable: false
                            modifiedBy:
                              readOnly: true
                              type: string
                              writeOnly: false
                              required: false
                              nullable: false
                              mutable: false
                            modifiedDateTime:
                              format: date-time
                              readOnly: true
                              type: string
                              writeOnly: false
                              required: false
                              nullable: false
                              mutable: false
                      httpMethods: OPTIONS,GET,DELETE,PATCH,POST
                      refs:
                        parent:
                          apiObject: department
                          fields:
                            id:
                              readOnly: true
                              type: string
                              writeOnly: false
                              required: false
                              nullable: false
                              mutable: false
                            key:
                              nullable: true
                              readOnly: false
                              type: string
                              writeOnly: false
                              required: false
                              mutable: true
                            name:
                              readOnly: true
                              type: string
                              writeOnly: false
                              required: false
                              nullable: false
                              mutable: false
                        supervisor:
                          apiObject: employee
                          fields:
                            id:
                              readOnly: true
                              type: string
                              writeOnly: false
                              required: false
                              nullable: false
                              mutable: false
                            key:
                              nullable: true
                              readOnly: false
                              type: string
                              writeOnly: false
                              required: false
                              mutable: true
                            name:
                              readOnly: true
                              type: string
                              writeOnly: false
                              required: false
                              nullable: false
                              mutable: false
                      lists: []
                      idempotenceSupported: true
                    ia::meta:
                      totalCount: 1
        '400':
          $ref: '#/components/responses/400error'
  /oauth2/token:
    post:
      summary: Request access token
      description: Requests an access token.
      tags:
        - oauth2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                title: New token
                properties:
                  token_type:
                    type: string
                    minLength: 1
                    example: Bearer
                  refresh_token:
                    type: string
                    minLength: 1
                    example: >-
                      eyJbhGciOiJIUzE1NiIxInR5cCI6IkpXVCJ9.eyJyZWZyZXNoVG9rZW4iOiI3ZDQxZDE4M2Q3NDVjOGY5OTZjOTk3MTE4MjNlMDE5OGVkNTU4Njk1IiwiY2xpZW50SWQiOiJkNGYyYjZiMzE4MTc0YjlhNjBhNy5JTlRBQ0NULmFwcC5zYWdlLmNvbSIsImNueUlkIjoiTWFyaW5hQ08yIn0.M0rM8huqlLib4FBFnSmjGLcu_HUr0UE_Q0ZGlYb0uXY
                  access_token:
                    type: string
                    minLength: 1
                    example: >-
                      eyJbhGciOiJIUzE1NiIxInR5cCI6IkpXVCJ9.eyJzZXNzaW9uSWQiOiI5QkkwdkVhbTBtMEhMTXZNeGdwVU1rZ2ZiUVlzeXcuLiIsImVuZHBvaW50IjoiaHR0cHM6XC9cL2RldjA5LmludGFjY3QuY29tXC91c2Vyc1wvYW5qYWxpLmlzcmFuaVwvcHJvamVjdHMubmV4dGdlbl9nYXRld2F5XC9hcGlcL3YxXC9hcGlcLyIsImNsaWVudElkIjoiZDRmMmI2YjMxODE3NGI5YTYwYTcuSU5UQUNDVC5hcHAuc2FnZS5jb20iLCJjbnlJZCI6Ik1hcmluYUNPMiJ9.16h1Sdd0wnyj2woiCr6i-3kI-g9Uw9s3xa4_Og-AEPk
                  expires_in:
                    type: number
                    example: 86400
                required:
                  - token_type
                  - refresh_token
                  - access_token
                  - expires_in
              examples:
                Valid Token:
                  value:
                    token_type: Bearer
                    refresh_token: >-
                      eyJbhGciOiJIUzE1NiIxInR5cCI6IkpXVCJ9.eyJyZWZyZXNoVG9rZW4iOiI3ZDQxZDE4M2Q3NDVjOGY5OTZjOTk3MTE4MjNlMDE5OGVkNTU4Njk1IiwiY2xpZW50SWQiOiJkNGYyYjZiMzE4MTc0YjlhNjBhNy5JTlRBQ0NULmFwcC5zYWdlLmNvbSIsImNueUlkIjoiTWFyaW5hQ08yIn0.M0rM8huqlLib4FBFnSmjGLcu_HUr0UE_Q0ZGlYb0uXY
                    access_token: >-
                      eyJbhGciOiJIUzE1NiIxInR5cCI6IkpXVCJ9.eyJzZXNzaW9uSWQiOiI5QkkwdkVhbTBtMEhMTXZNeGdwVU1rZ2ZiUVlzeXcuLiIsImVuZHBvaW50IjoiaHR0cHM6XC9cL2RldjA5LmludGFjY3QuY29tXC91c2Vyc1wvYW5qYWxpLmlzcmFuaVwvcHJvamVjdHMubmV4dGdlbl9nYXRld2F5XC9hcGlcL3YxXC9hcGlcLyIsImNsaWVudElkIjoiZDRmMmI2YjMxODE3NGI5YTYwYTcuSU5UQUNDVC5hcHAuc2FnZS5jb20iLCJjbnlJZCI6Ik1hcmluYUNPMiJ9.16h1Sdd0wnyj2woiCr6i-3kI-g9Uw9s3xa4_Og-AEPk
                    expires_in: 86400
      operationId: post-oauth2-token
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                grant_type:
                  type: string
                  minLength: 1
                  example: password
                username:
                  type: string
                  minLength: 1
                  example: Admin@YourCompanyId
                password:
                  type: string
                  example: WQiOiI5Qkkw
                client_id:
                  type: string
                  minLength: 1
                  example: d4f2b6b316174b9b60a7.SHARKS.app.sage.com
                client_secret:
                  type: string
                  minLength: 1
                  example: 0f4e52b76e77906255c34a800b5f177fce3f1ba9
              required:
                - grant_type
                - username
                - client_id
                - client_secret
            examples:
              Grant Type - password:
                value:
                  grant_type: password
                  username: Admin@YourCompanyId
                  password: WQiOiI5Qkkw
                  client_id: d4f2b6b316174b9b60a7.SHARKS.app.sage.com
                  client_secret: 0f4e52b76e77906255c34a800b5f177fce3f1ba9
  /services/query:
    post:
      summary: Query an object
      description: Queries an object for filtered data.
      operationId: post-services-query
      tags:
        - Query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/query.schema'
            examples:
              Query vendor:
                value:
                  object: vendor
                  fields:
                    - id
                    - name
                    - status
                    - href
                  filters:
                    - $eq:
                        status: active
                    - $eq:
                        billingType: openItem
                  filterExpression: 1 and 2
                  orderBy:
                    - id: asc
              Query user-view:
                value:
                  object: user-view
                  fields:
                    - name
                    - object
                    - query
                  filters:
                    - $eq:
                        object: vendor
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Details of the query
                properties:
                  ia::result:
                    type: array
                    description: Fields requested in query
                    items:
                      type: object
                      description: List of fields and their values
                      additionalProperties:
                        oneOf:
                          - type: string
                            nullable: true
                          - type: integer
                            nullable: true
                          - type: number
                            nullable: true
                          - type: object
                  ia::meta:
                    $ref: '#/components/schemas/metadata-pages.schema'
              examples:
                Response - Query vendor:
                  value:
                    ia::result:
                      - id: Vend-00002
                        name: Test vendor
                        status: active
                        href: /objects/vendor/85
                      - id: VEND-00010
                        name: Design Works
                        status: active
                        href: /objects/vendor/111
                    ia::meta:
                      totalCount: 2
                      start: 1
                      pageSize: 100
                Response - Query user-view:
                  value:
                    ia::result:
                      - name: vendorTest1
                        object: vendor
                        query:
                          object: vendor
                          fields:
                            - id
                            - name
                            - status
                            - href
                          filters:
                            '1':
                              $eq:
                                status: active
                            '2':
                              $eq:
                                billingType: openItem
                          filterExpression: 1 and 2
                          orderBy:
                            id: asc
                      - name: vendorTest2
                        object: vendor
                        query:
                          object: vendor
                          fields:
                            - id
                            - name
                            - status
                            - href
                          filters:
                            '1':
                              $eq:
                                status: active
                            '2':
                              $eq:
                                billingType: balanceForward
                          filterExpression: 1 and 2
                          orderBy:
                            id: asc
                    ia::meta:
                      totalCount: 2
                      start: 1
                      pageSize: 100
        '400':
          $ref: '#/components/responses/400error'
  /objects/system-view/{key}:
    parameters:
      - schema:
          type: string
        name: key
        in: path
        required: true
        description: System-assigned key for the system view.
    get:
      summary: Get a system view
      description: Returns detailed information for a particular system view.
      tags:
        - System views
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Details of the system-view
                properties:
                  ia::result:
                    $ref: '#/components/schemas/system-view.s1.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
        '400':
          $ref: '#/components/responses/400error'
      operationId: get-objects-system-view-key
  /objects/txn-definition:
    get:
      summary: List transaction definition
      description: >-
        Returns a collection with a key, ID, and link for each transaction
        definition.
      tags:
        - Transaction definition
      operationId: get-objects-txn-definition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: List of txn-definition objects
                properties:
                  ia::result:
                    type: array
                    items:
                      $ref: '#/components/schemas/object-reference.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata-pages.schema'
              examples:
                example-1:
                  value:
                    ia::result:
                      - key: '33'
                        id: '33'
                        href: /objects/txn-definition/33
                    ia::meta:
                      totalCount: 1
                      start: 1
                      pageSize: 100
                      next: null
                      previous: null
        '400':
          $ref: '#/components/responses/400error'
    post:
      summary: Create a/an transaction definition
      description: Creates a new transaction definition.
      tags:
        - Transaction definition
      operationId: post-objects-txn-definition
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/txn-definition.s1.schema'
                - $ref: '#/components/schemas/txn-definitionRequiredProperties'
            examples:
              example-1:
                value:
                  id: Sales Invoice
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                title: New txn-definition
                properties:
                  ia::result:
                    $ref: '#/components/schemas/object-reference.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
              examples: {}
        '400':
          $ref: '#/components/responses/400error'
  /objects/txn-definition/{key}:
    parameters:
      - name: key
        description: System-assigned key for the transaction definition.
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get a transaction definition
      description: Returns detailed information for a particular transaction definition.
      tags:
        - Transaction definition
      operationId: get-objects-txn-definition-key
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Details of the txn-definition
                properties:
                  ia::result:
                    $ref: '#/components/schemas/txn-definition.s1.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
              examples:
                example-1:
                  value:
                    ia::result:
                      key: '154'
                      id: Sales Invoice
                      href: /objects/txn-definition/154
                    ia::meta:
                      totalCount: 1
        '400':
          $ref: '#/components/responses/400error'
    patch:
      summary: Update a/an transaction definition
      description: >-
        Updates an existing transaction definition by setting field values. Any
        fields not provided remain unchanged.
      tags:
        - Transaction definition
      operationId: patch-objects-txn-definition-key
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/txn-definition.s1.schema'
                - type: object
                  properties:
                    id:
                      readOnly: true
                      example: 'true'
            examples:
              example-1:
                value:
                  key: '154'
                  id: 'true'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Updated txn-definition
                properties:
                  ia::result:
                    $ref: '#/components/schemas/object-reference.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
              examples:
                example-1:
                  value:
                    ia::result:
                      key: '33'
                      id: '33'
                      href: /objects/txn-definition/33
                    ia::meta:
                      totalCount: 1
        '400':
          $ref: '#/components/responses/400error'
    delete:
      summary: Delete a/an transaction definition
      description: Deletes a/an transaction definition.
      tags:
        - Transaction definition
      operationId: delete-objects-txn-definition-key
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400error'
  /objects/user-view/{key}:
    parameters:
      - schema:
          type: string
          example: '262'
        name: key
        in: path
        required: true
        description: System-assigned key for the user view.
    get:
      summary: Get a user view
      description: Returns detailed information for a particular user view.
      tags:
        - User views
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Details of the user-view
                properties:
                  ia::result:
                    $ref: '#/components/schemas/user-view.s1.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
              examples:
                Example-1:
                  value:
                    ia::result:
                      key: '262'
                      id: '262'
                      name: vendorTest3
                      description: ' testing vendor query'
                      category: null
                      owner:
                        key: '1'
                        id: Admin
                        href: /objects/user/1
                      object: vendor
                      query:
                        object: vendor
                        fields:
                          - id
                          - name
                          - status
                          - href
                        filters:
                          - $eq:
                              status: active
                          - $eq:
                              billingType: openItem
                        filterExpression: 1 and 2
                        orderBy:
                          - id: asc
                      status: active
                      viewVersion: '0'
                      audit:
                        createdDateTime: '2021-05-16T17:41:55Z'
                        modifiedDateTime: '2021-05-17T17:41:55Z'
                        createdBy: '1'
                        modifiedBy: '1'
                      href: /objects/user-view/262
                    ia::meta:
                      totalCount: 1
        '400':
          $ref: '#/components/responses/400error'
      operationId: get-objects-user-view-key
    patch:
      summary: Update a user view
      description: >-
        Updates an existing user view by setting field values. Any fields not
        provided remain unchanged.
      operationId: patch-objects-user-view-key
      tags:
        - User views
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Updated user-view
                properties:
                  ia::result:
                    $ref: '#/components/schemas/object-reference.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
        '400':
          $ref: '#/components/responses/400error'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/user-view.s1.schema'
                - type: object
                  properties:
                    id:
                      readOnly: true
    delete:
      summary: Delete a user view
      description: Deletes a user view.
      tags:
        - User views
      operationId: delete-objects-user-view-key
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400error'
  /objects/user-view:
    get:
      summary: List user views
      description: Returns a collection with a key, ID, and link for each user view.
      tags:
        - User views
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: List of user-view objects
                properties:
                  ia::result:
                    type: array
                    items:
                      $ref: '#/components/schemas/object-reference.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata-pages.schema'
        '400':
          $ref: '#/components/responses/400error'
      operationId: get-objects-user-view
    post:
      summary: Create a user view
      description: Creates a new  user view.
      tags:
        - User views
      operationId: post-objects-user-view
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                title: New user-view
                properties:
                  ia::result:
                    $ref: '#/components/schemas/object-reference.schema'
                  ia::meta:
                    $ref: '#/components/schemas/metadata.schema'
        '400':
          $ref: '#/components/responses/400error'
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/user-view.s1.schema'
                - $ref: '#/components/schemas/userViewRequiredProperties'
            examples:
              User view for vendor:
                value:
                  name: vendorTest5
                  query:
                    object: vendor
                    fields:
                      - id
                      - name
                      - status
                      - href
                    filters:
                      - $eq:
                          status: inactive
                      - $eq:
                          billingType: balanceForward
                    filterExpression: 1 and 2
                    orderBy:
                      - id: desc
  /services/view:
    post:
      summary: Query a view
      description: Queries a view.
      tags:
        - Views
      operationId: post-services-view
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: Details of the query
                properties:
                  ia::result:
                    type: array
                    description: Fields requested in query
                    items:
                      type: object
                      description: ''
                      properties:
                        fieldName:
                          type: string
                  ia::meta:
                    $ref: '#/components/schemas/metadata-pages.schema'
        '400':
          $ref: '#/components/responses/400error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/view.schema'
            examples:
              User Query:
                value:
                  key: '540'
                  viewType: user
                  filterParameters:
                    asOfDate: '2020-12-01'
                    caseSensitiveComparison: false
              System Query:
                value:
                  key: vendor::getAll
                  viewType: system
                  orderBy:
                    - name: asc
components:
  schemas:
    composite:
      type: array
      x-mappedTo: __custom__
      items:
        $ref: '#/components/schemas/composite.s1.schema'
    composite.s1.schema:
      title: composite
      description: >-
        Schema for describing a single request that will be included as part of
        a POST body sent to the composite request service.
      x-mappedTo: __custom__
      type: object
      properties:
        method:
          type: string
          description: Operation for request.
          x-mappedTo: method
          nullable: false
          example: POST
          enum:
            - GET
            - POST
            - PATCH
            - DELETE
        path:
          type: string
          description: Path to the request endpoint in the Intacct REST API.
          nullable: false
          x-mappedTo: path
          pattern: /^\/(objects|services)\/[a-z_][a-z_0-9.\-:]+(.*)?$/
          example: /objects/contact
        headers:
          type: object
          description: Headers needed for this request.
          x-mappedTo: headers
          example:
            Idempotency-Key: e9606bb2-6be1-4c9e-a2a7-134cd644a5ee
        body:
          type: object
          description: Request body for POST or PATCH operations.
          x-mappedTo: body
          example:
            lastName: Doe
            firstName: John
            id: Doe, John
        resultReference:
          type: string
          description: >-
            Reference identifier for success results, used by other requests as
            input data.
          x-mappedTo: resultReference
          nullable: false
          example: contactRef
      required:
        - method
        - path
    object-reference.schema:
      title: object-reference
      type: object
      description: Reference Object definition
      properties:
        key:
          type: string
        id:
          type: string
        href:
          type: string
          readOnly: true
    metadata.schema:
      title: metadata
      description: Meta data for response
      type: object
      properties:
        totalCount:
          type: integer
          description: Total Count
          readOnly: true
          example: 3
    metadata-extended.schema:
      title: metadata-extended
      description: Meta data with partial success
      type: object
      allOf:
        - $ref: '#/components/schemas/metadata.schema'
        - type: object
          properties:
            totalSuccess:
              type: integer
              description: Total Success
              x-mappedTo: null
              readOnly: true
              example: 2
            totalError:
              type: integer
              description: Total Errors
              x-mappedTo: null
              readOnly: true
              example: 1
    error-response.schema:
      title: error-response
      type: object
      description: Error response
      properties:
        ia::error:
          type: object
          properties:
            code:
              type: string
              example: invalidRequest
            message:
              type: string
              example: Malformed URL
            supportId:
              type: string
              example: sQrM9%7EYdh5oDEWVb80mrn9xuHjoAAAABBQ
            details:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                    example: TODO
                  message:
                    type: string
                    example: TODO
                  correction:
                    type: string
                    example: TODO
    export:
      $ref: '#/components/schemas/export.s1.schema'
    query.schema:
      title: query
      description: Query request
      type: object
      properties:
        object:
          type: string
          example: vendor
          description: Object type to query.
        fields:
          description: >-
            List of fields to include in the response. Can be any combination of
            these:


            * The name of a field in the object that you are querying, such as
            `id`.

            * The name of a field in a related object, using the form
            `relatedObjectName.fieldName`, such as `vendor.id`.

            * The result of an aggregate function run against the values in the
            returned objects. Use the form `function:fieldName`, such as
            `min:startDate` to return the earliest starting date. Valid function
            names are:

                * `count`
                * `avg`
                * `sum`
                * `min`
                * `max`

            * The result of an aggregate function run against the values in
            related objects, using the form
            `function:relatedObjectName.fieldName`, such as
            `max:vendor.creditLimit`. The same functions are supported as for
            object fields.
          type: array
          items:
            type: string
          example:
            - key
            - id
            - max:vendor.creditLimit
        filters:
          description: >-
            Filter conditions to select the objects to return based on their
            field values. You use operators and conditions to build your filter,
            such as `{"$eq":{"status":"active"}}` to select objects in which
            `status` is equal to "active".
          example:
            - $eq:
                status: active
            - $gt:
                totalDue: '1000'
            - $contains:
                name: Acme
          type: array
          items:
            anyOf:
              - title: equal
                type: object
                description: >-
                  Field value must be equal to this specified value.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [filterParameters](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.


                  For example, `{"eq":{"postingDate":"priorYear"}}`.
                properties:
                  $eq:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                          nullable: true
                        - type: integer
                          nullable: true
                        - type: number
                          nullable: true
                        - type: boolean
                example:
                  $eq:
                    status: active
              - title: not equal
                type: object
                description: >-
                  Field value must not be equal to this specified value.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [filterParameters](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $ne:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                          nullable: true
                        - type: integer
                          nullable: true
                        - type: number
                          nullable: true
                        - type: boolean
                example:
                  $ne:
                    status: inactive
              - title: less than
                type: object
                description: >-
                  Field value must be less than this specified value.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [filterParameters](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $lt:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                example:
                  $lt:
                    totalDue: '100'
              - title: less than or equal
                type: object
                description: >-
                  Field value must be less than or equal to this specified
                  value.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [filterParameters](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $lte:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                        - type: boolean
                example:
                  $lte:
                    totalDue: '500'
              - title: greater than
                type: object
                description: >-
                  Field value must be greater than this specified value.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [`filterParameters`](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $gt:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                example:
                  $gt:
                    totalDue: '1000'
              - title: greater than or equal
                type: object
                description: >-
                  Field value must be greater than or equal to this specified
                  value.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [`filterParameters`](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $gte:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                        - type: boolean
                example:
                  $gte:
                    totalDue: '999'
              - title: in
                type: object
                description: >-
                  Field value is one of the specified values.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [`filterParameters`](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $in:
                    type: object
                    description: >-
                      The field name and list of values to be compared with
                      object values.
                    additionalProperties:
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: integer
                          - type: number
                          - type: boolean
                example:
                  $in:
                    firstName:
                      - Tim
                      - Anjali
                      - Gabriel
              - title: not in
                type: object
                description: >-
                  Field value is not one of the specified values.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [`filterParameters`](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $notIn:
                    type: object
                    description: >-
                      The field name and list of values to be compared with
                      object values.
                    additionalProperties:
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: integer
                          - type: number
                          - type: boolean
                example:
                  $notIn:
                    country:
                      - United States
                      - Canada
              - title: between
                type: object
                description: >-
                  Field value is within the given range, inclusive.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [`filterParameters`](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $between:
                    type: object
                    description: >-
                      The field name and the beginning and ending values to be
                      compared with object values.
                    additionalProperties:
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: integer
                          - type: number
                example:
                  $between:
                    totalDue:
                      - '1'
                      - '1000'
              - title: not between
                type: object
                description: >-
                  Field value is not within the given range.


                  For date fields, you can use these macro values that are
                  relative to the current date or the `asOfDate` in
                  [`filterParameters`](#filterParameters), if set:


                  <table style="border-collapse: collapse; border: none">

                  <tr>

                  <td style="border: none">

                  <ul>

                  <li><code>today</code></liu>

                  <li><code>currentWeek</code></liu>

                  <li><code>currentMonth</code></liu>

                  <li><code>currentQuarter</code></liu>

                  <li><code>currentYear</code></liu>

                  </ul>

                  </td>

                  <td style="border: none">

                  <ul>

                  <li><code>yesterday</code></liu>

                  <li><code>lastWeek</code></liu>

                  <li><code>priorMonth</code></liu>

                  <li><code>priorQuarter</code></liu>

                  <li><code>priorYear</code></liu>

                  </ul>

                  </td>

                  </tr>

                  </table>


                  These are most useful for queries that you want to save and
                  use repeatedly, such as for views or reports. Just change the
                  `asOfDate` each time to retrieve the same data set for
                  different time periods.
                properties:
                  $notBetween:
                    type: object
                    description: >-
                      The field name and the beginning and ending values to be
                      compared with object values.
                    additionalProperties:
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: integer
                          - type: number
                example:
                  $notBetween:
                    totalDue:
                      - '100'
                      - '1000'
              - title: contains
                type: object
                description: >-
                  Field value contains the given string or number. Cannot be
                  used with date fields.
                properties:
                  $contains:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                example:
                  $contains:
                    name: Acme
              - title: does not contain
                type: object
                description: >-
                  Field value does not contain the given string or number.
                  Cannot be used with date fields.
                properties:
                  $notContains:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                example:
                  $notContains:
                    name: llc
              - title: starts with
                type: object
                description: >-
                  Field value starts with this string or number. Cannot be used
                  with date fields.
                properties:
                  $startsWith:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                example:
                  $startsWith:
                    name: A
              - title: does not start with
                type: object
                description: >-
                  Field value does not start with this string or number. Cannot
                  be used with date fields.
                properties:
                  $notStartsWith:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                example:
                  $notStartsWith:
                    name: Q
              - title: ends with
                type: object
                description: >-
                  Field value ends with this string or number. Cannot be used
                  with date fields.
                properties:
                  $endsWith:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                example:
                  $endsWith:
                    name: inc
              - title: does not end with
                type: object
                description: >-
                  Field value does not end with this string or number. Cannot be
                  used with date fields.
                properties:
                  $notEndsWith:
                    type: object
                    description: >-
                      The field name and value to be compared with object
                      values.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: integer
                        - type: number
                example:
                  $notEndsWith:
                    name: llc
        filterExpression:
          description: >-
            Logical operators to apply to the expressions in the `filters`
            array. The expressions are implicitly numbered starting at 1.
            Supports `and`, `or`, and grouping with parentheses.
          type: string
          example: (1 and 2) or 3
        filterParameters:
          description: |-
            <a name="filterParameters"></a>
            Pre-defined filter options.
          type: object
          properties:
            asOfDate:
              type: string
              format: date
              description: >-
                The "as of" date to use with any relative date comparisons in
                `filters`. For example, if `asOfDate` is set to "2022-04-01"
                then `priorMonth` will be "03".


                The current date is used if `asOfDate` is not set.
              example: '2022-04-01'
            includeHierarchyFields:
              description: >-
                Set to `true` to include hierarchical structure information with
                each object in the response.
              type: boolean
              example: false
              default: false
            caseSensitiveComparison:
              description: >-
                Queries ignore case by default. Set to `true` for a
                case-sensitive query.
              type: boolean
              example: true
              default: false
            includePrivate:
              description: >-
                By default, in a multi-entity company, queries from the
                top-level entity do not access data in private entities. Set
                includePrivate to true if you want to query data in private
                entities.
              type: boolean
              default: false
              example: false
        orderBy:
          description: >-
            Set the order of the results by specifying field names to sort by
            and whether they should be in ascending or descending order.
          type: array
          items:
            type: object
            title: field name and sort order
            additionalProperties:
              type: string
              enum:
                - asc
                - desc
          example:
            - totalDue: asc
            - lastPaymentMadeDate: desc
        start:
          description: First record of the result set to include in the response.
          type: integer
          example: 1
        size:
          description: Number of records to include in the response.
          type: integer
          example: 100
    export.s1.schema:
      title: export
      description: Export
      type: object
      x-mappedTo: __custom__
      properties:
        fileType:
          x-mappedTo: __custom__
          description: >-
            Export file type. Allowed values are - 'pdf', 'csv', 'word', 'xml',
            'xls'
          enum:
            - pdf
            - csv
            - word
            - xml
            - xls
          type: string
          example: csv
        query:
          type: object
          description: Query Parameters
          allOf:
            - $ref: '#/components/schemas/query.schema'
            - type: object
              x-mappedTo: QUERY
    key-value-map:
      $ref: '#/components/schemas/key-value-map.s1.schema'
    metadata-pages.schema:
      title: metadata-pages
      description: Meta data for collection response
      type: object
      allOf:
        - $ref: '#/components/schemas/metadata.schema'
        - type: object
          properties:
            start:
              type: integer
              description: Start Element Number
              x-mappedTo: null
              readOnly: true
              example: 1
            pageSize:
              type: integer
              description: Page Size
              x-mappedTo: null
              readOnly: true
              example: 100
            next:
              type: integer
              description: Next Element Number
              x-mappedTo: null
              readOnly: true
              nullable: true
              example: 101
            previous:
              type: integer
              description: Previous Element Number
              x-mappedTo: null
              readOnly: true
              nullable: true
              example: null
    key-value-map.s1.schema:
      title: key-value-map
      description: key-value-map
      type: object
      x-mappedTo: __custom__
      properties:
        key:
          type: string
          description: Key to identify the map
          x-mappedTo: key
          example: page-layout3
        type:
          type: string
          description: Key type
          x-mappedTo: type
          enum:
            - user
            - company
          default: user
          example: user
        value:
          oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: object
            - type: array
              items: {}
          description: >-
            Can be any value - string, number, integer, boolean, object or
            array.
          x-mappedTo: value
          example: 'type: string'
        href:
          type: string
          readOnly: true
          example: /objects/key-value-map/page-layout3
    object-model.schema:
      title: object-model
      type: object
      description: Generic response for object model definition
      properties:
        fields:
          type: object
        groups:
          type: object
        refs:
          type: object
        idempotenceSupported:
          type: boolean
          example: true
          default: true
        httpMethods:
          type: string
          example: OPTIONS,GET,DELETE,PATCH,POST
    systemView:
      $ref: '#/components/schemas/system-view.s1.schema'
    system-view.s1.schema:
      title: system-view
      type: object
      x-idempotence: true
      x-mappedTo: __custom__
      description: Filter View.
      properties:
        key:
          type: string
          description: Record Key
          x-mappedTo: RECORDNO
          readOnly: true
        id:
          type: string
          description: Record Id
          x-mappedTo: RECORDNO
          readOnly: true
        name:
          type: string
          description: View name
          x-mappedTo: NAME
        href:
          type: string
          readOnly: true
        description:
          type: string
          description: Description
          x-mappedTo: DESCRIPTION
        object:
          type: string
          description: Object
          x-mappedTo: OBJECT
        query:
          type: object
          description: Query Parameters
          allOf:
            - $ref: '#/components/schemas/query.schema'
            - type: object
              x-mappedToType: blob
              x-mappedTo: QUERYPARAMS
        contexts:
          type: array
          description: Contexts
          x-mappedTo: CONTEXTS
          items:
            type: string
          readOnly: true
    txn-definition:
      $ref: '#/components/schemas/txn-definition.s1.schema'
    txn-definitionRequiredProperties:
      type: object
      required:
        - id
    txn-definition.s1.schema:
      title: txn-definition
      type: object
      description: Transaction definition
      x-mappedTo: documentparams
      properties:
        key:
          type: string
          description: key
          x-mappedTo: RECORDNO
          readOnly: true
          example: '154'
        id:
          type: string
          description: id
          x-mappedTo: DOCID
          x-mutable: false
          example: Sales Invoice
        href:
          type: string
          readOnly: true
          example: /objects/txn-definition/154
    userView:
      $ref: '#/components/schemas/user-view.s1.schema'
    userViewRequiredProperties:
      type: object
      required:
        - name
    status.s1.schema:
      title: status
      type: string
      enum:
        - active
        - inactive
      x-mappedToValues:
        - active
        - inactive
      description: Object status.
      default: active
      x-mappedTo: STATUS
      example: active
    audit.s1.schema:
      type: object
      title: audit
      properties:
        createdDateTime:
          description: Time of the submission
          type: string
          format: date-time
          example: '2022-04-20T16:20:00Z'
          x-mappedTo: WHENCREATED
          readOnly: true
        modifiedDateTime:
          description: Time of the modification
          type: string
          format: date-time
          example: '2022-04-20T16:20:00Z'
          x-mappedTo: WHENMODIFIED
          readOnly: true
        createdBy:
          description: User who created this
          type: string
          example: '1'
          x-mappedTo: CREATEDBY
          readOnly: true
        modifiedBy:
          description: User who modified this
          type: string
          example: '95'
          x-mappedTo: MODIFIEDBY
          readOnly: true
      readOnly: true
    user-view.s1.schema:
      title: user-view
      x-mappedTo: filterview
      type: object
      x-idempotence: true
      description: Filter View.
      properties:
        key:
          type: string
          description: Record Key
          x-mappedTo: RECORDNO
          readOnly: true
        id:
          type: string
          description: Record Id
          x-mappedTo: RECORDNO
          readOnly: true
        name:
          type: string
          description: View name
          x-mappedTo: NAME
        href:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/status.s1.schema'
        description:
          type: string
          description: Description
          x-mappedTo: DESCRIPTION
        object:
          type: string
          description: Object
          x-mappedTo: OBJECT
        category:
          type: string
          description: View category
          x-mappedTo: CATEGORY
          nullable: true
        viewVersion:
          type: string
          description: View Version
          x-mappedTo: APIVERSION
        isPublic:
          type: boolean
          description: Type of view
          x-mappedTo: ISPUBLIC
        context:
          type: string
          description: Context of view
          x-mappedTo: CONTEXT
        query:
          type: object
          description: Query Parameters
          allOf:
            - $ref: '#/components/schemas/query.schema'
            - type: object
              x-mappedToType: blob
              x-mappedTo: QUERYPARAMS
        metadata:
          type: object
          description: Metadata Parameters
          x-mappedTo: METADATAPARAMS
          properties:
            frozenColumnsCount:
              type: number
            columns:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: Column ID
                    x-mappedTo: id
                    readOnly: true
                  format:
                    type: string
                    description: Column Format
                    x-mappedTo: format
                    readOnly: true
                  size:
                    type: number
                    description: Column Size
                    x-mappedTo: size
                    readOnly: true
        owner:
          type: object
          x-object: user
          x-mappedTo: userinfo
          title: owner
          properties:
            key:
              type: string
              x-mappedTo: OWNER
              readOnly: true
            id:
              type: string
              x-mappedTo: OWNERID
            href:
              type: string
              readOnly: true
        audit:
          $ref: '#/components/schemas/audit.s1.schema'
    view.schema:
      title: view
      description: View
      type: object
      properties:
        key:
          type: string
          description: Key to identify the view
          example: '12'
        viewType:
          type: string
          description: Specify the type of view to execute
          example: user
          enum:
            - user
            - system
        filterParameters:
          anyOf:
            - properties:
                asOfDate:
                  type: string
                  description: >-
                    This date will determine the values for date macros used in
                    filters. 

                    Example if asOfDate is set to "2021-03-05" then date macro
                    "Prior Month" will be "02"

                    Supported date macros in filter comparison are
                      - today
                      - yesterday
                      - currentWeek
                      - lastWeek
                      - currentMonth
                      - priorMonth
                      - currentQuarter
                      - priorQuarter
                      - currentYear
                      - priorYear
                  example: today
                includeHierarchyFields:
                  type: boolean
                  example: true
                  default: false
                caseSensitiveComparison:
                  type: boolean
                  example: true
                  default: false
          type: object
        orderBy:
          type: array
          items:
            type: object
            properties:
              fieldName:
                type: string
                example: asc
                enum:
                  - asc
                  - desc
        start:
          type: integer
          description: Starting element
          example: 1
        size:
          type: integer
          description: Page size
          example: 100
      required:
        - key
        - viewType
  responses:
    400error:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-response.schema'
  securitySchemes: {}
  parameters:
    key:
      name: key
      description: Key
      in: path
      required: true
      schema:
        type: string
        pattern: (\/?[^\/\?#]*)?
    type:
      name: type
      in: query
      schema:
        type: string
        enum:
          - user
          - company
        default: user
      required: false
      description: Key type
    name:
      name: name
      description: Object name
      in: query
      schema:
        type: string
      required: true
      example: vendor
    Authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        default: Bearer {{access_token}}
      description: Authorization Token Header
